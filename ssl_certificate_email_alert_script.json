{
  "name": "SSL Certificate Monitor (25 Days Alert)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 15,
              "triggerAtMinute": 10
            }
          ]
        }
      },
      "id": "935df363-c143-45f6-854c-28a05c4b3fac",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-1520, 112]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "domains",
              "value": "[{\"domain\": \"example.domain.com\"}]"
            }
          ]
        },
        "options": {}
      },
      "id": "bd8d059e-8f34-4f69-b900-5f23d9a9c52e",
      "name": "Domain List",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-1280, 112]
    },
    {
      "parameters": {
        "functionCode": "let domains = $json.domains;\nif (typeof domains === 'string') {\n  try { domains = JSON.parse(domains); } catch (e) { throw new Error('Invalid JSON format'); }\n}\nif (!Array.isArray(domains)) throw new Error('Domains is not an array');\nreturn domains.map(d => ({ json: d }));"
      },
      "id": "1d2b85b8-fa62-4c03-82a6-48df8ddcd601",
      "name": "Extract Domain",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-1008, 112]
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=sh -c \"echo | openssl s_client -servername {{$json['domain']}} -connect {{$json['domain']}}:443 2>/dev/null | openssl x509 -noout -dates || echo 'notBefore=N/A\\nnotAfter=N/A'\"; echo \"##DOMAIN##={{$json['domain']}}\""
      },
      "id": "7fde3115-9268-4b6a-a42e-7ec9aa581af0",
      "name": "Check SSL Dates",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-752, 112]
    },
    {
      "parameters": {
        "functionCode": "const results = [];\nfor (const item of items) {\n  const o = item.json.stdout || '';\n  const domainMatch = o.match(/##DOMAIN##=(.*)/);\n  const domain = domainMatch ? domainMatch[1].trim() : (item.json.domain || 'unknown');\n  const issue = o.match(/notBefore=(.*)/)?.[1]?.trim() || 'N/A';\n  const expiry = o.match(/notAfter=(.*)/)?.[1]?.trim() || 'N/A';\n  if (issue === 'N/A' || expiry === 'N/A') {\n    results.push({ json: { domain, issueDate: null, expiryDate: null, daysLeft: 0, error: 'SSL not found or invalid' } });\n    continue;\n  }\n  const parseDate = (str) => new Date(Date.parse(str.replace('GMT','').trim() + ' UTC'));\n  const issueDate = parseDate(issue);\n  const expiryDate = parseDate(expiry);\n  const now = new Date();\n  const daysLeft = Math.floor((expiryDate - now) / (1000*60*60*24));\n  results.push({ json: { domain, issueDate: issueDate.toISOString(), expiryDate: expiryDate.toISOString(), daysLeft } });\n}\nreturn results;"
      },
      "id": "ed7867c1-bee5-4312-8b8a-2aaf4fe4892d",
      "name": "Calculate SSL Age",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-496, 112]
    },
    {
      "parameters": {
        "fromEmail": "example@gmail.com",
        "toEmail": "example@gmail.com",
        "ccEmail": "example@gmail.com example@gmail.com",
        "subject": "=SSL Expiry Alert: {{$json['domain']}} — {{$json['daysLeft']}} days left",
        "text": "=Hello Team,\\n\\nThe SSL certificate for {{$json['domain']}} will expire soon.\\nRemaining validity: {{$json['daysLeft']}} days.\\n\\nIssued on: {{$json['issueDate']}}\\nExpires on: {{$json['expiryDate']}}\\n\\nPlease review renewal schedule.\\n\\n--\\nRegards,\\nn8n SSL Monitor",
        "options": {}
      },
      "id": "de6a21ff-4036-4c69-81aa-06f164c2acf6",
      "name": "Send Email Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [192, 0],
      "credentials": {
        "smtp": {
          "id": "88m7pN2vnxOnD7iB",
          "name": "example@gmail.com SMTP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ Number($json['daysLeft']) || 0 }}",
              "operation": "smallerEqual",
              "value2": 25
            }
          ]
        }
      },
      "id": "267e713a-c6a7-4ce9-846d-da1cf20ed798",
      "name": "Is SSL ≤ 25 Days Left?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-240, 112],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "functionCode": "// Handle edge cases safely\nif (!items || !Array.isArray(items) || items.length === 0) {\n  console.log(\"No SSL items received. Skipping email.\");\n  return [];\n}\n\n// Filter only valid, non-null items with json + domain + numeric daysLeft\nconst validItems = items.filter(i => {\n  try {\n    return i && i.json && i.json.domain && typeof i.json.daysLeft === 'number' && i.json.daysLeft > 0;\n  } catch (e) {\n    return false;\n  }\n});\n\n// If nothing valid found, stop here (no email)\nif (validItems.length === 0) {\n  console.log(\"No valid SSL expiring soon. Stopping workflow — no mail.\");\n  return [];\n}\n\n// Return only valid results\nreturn validItems;"
      },
      "id": "acc7ae21-38bf-49a4-ae5f-921a2dc9c1c0",
      "name": "Pre-Email Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [0, 0]
    }
  ],
  "connections": {
    "Schedule Trigger": { "main": [[{ "node": "Domain List", "type": "main", "index": 0 }]] },
    "Domain List": { "main": [[{ "node": "Extract Domain", "type": "main", "index": 0 }]] },
    "Extract Domain": { "main": [[{ "node": "Check SSL Dates", "type": "main", "index": 0 }]] },
    "Check SSL Dates": { "main": [[{ "node": "Calculate SSL Age", "type": "main", "index": 0 }]] },
    "Calculate SSL Age": { "main": [[{ "node": "Is SSL ≤ 30 Days Left?", "type": "main", "index": 0 }]] },
    "Is SSL ≤ 30 Days Left?": { "main": [[{ "node": "Pre-Email Validation", "type": "main", "index": 0 }]] },
    "Pre-Email Validation": { "main": [[{ "node": "Send Email Alert", "type": "main", "index": 0 }]] }
  },
  "active": true,
  "settings": { "executionOrder": "v1" },
  "versionId": "6a6418a4-e3d2-4d23-a85e-8e03fcfdcb5d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f208dc3a9f781b86ff3745b5887859efea8476f8f76e9ab8a388012c4ef2324d"
  },
  "id": "MTrIEziFP7svamT9",
  "tags": []
}
